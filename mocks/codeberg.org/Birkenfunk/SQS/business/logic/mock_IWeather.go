// Code generated by mockery v2.42.2. DO NOT EDIT.

package logic

import (
	dtos "codeberg.org/Birkenfunk/SQS/dtos"

	mock "github.com/stretchr/testify/mock"
)

// MockIWeather is an autogenerated mock type for the IWeather type
type MockIWeather struct {
	mock.Mock
}

type MockIWeather_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIWeather) EXPECT() *MockIWeather_Expecter {
	return &MockIWeather_Expecter{mock: &_m.Mock}
}

// GetWeather provides a mock function with given fields: location
func (_m *MockIWeather) GetWeather(location string) *dtos.WeatherDto {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *dtos.WeatherDto
	if rf, ok := ret.Get(0).(func(string) *dtos.WeatherDto); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.WeatherDto)
		}
	}

	return r0
}

// MockIWeather_GetWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeather'
type MockIWeather_GetWeather_Call struct {
	*mock.Call
}

// GetWeather is a helper method to define mock.On call
//   - location string
func (_e *MockIWeather_Expecter) GetWeather(location interface{}) *MockIWeather_GetWeather_Call {
	return &MockIWeather_GetWeather_Call{Call: _e.mock.On("GetWeather", location)}
}

func (_c *MockIWeather_GetWeather_Call) Run(run func(location string)) *MockIWeather_GetWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIWeather_GetWeather_Call) Return(_a0 *dtos.WeatherDto) *MockIWeather_GetWeather_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIWeather_GetWeather_Call) RunAndReturn(run func(string) *dtos.WeatherDto) *MockIWeather_GetWeather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIWeather creates a new instance of MockIWeather. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIWeather(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIWeather {
	mock := &MockIWeather{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
