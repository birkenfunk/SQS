// Code generated by mockery v2.42.2. DO NOT EDIT.

package handler

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockIHealthHandler is an autogenerated mock type for the IHealthHandler type
type MockIHealthHandler struct {
	mock.Mock
}

type MockIHealthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHealthHandler) EXPECT() *MockIHealthHandler_Expecter {
	return &MockIHealthHandler_Expecter{mock: &_m.Mock}
}

// GetHealthHandler provides a mock function with given fields: rw, r
func (_m *MockIHealthHandler) GetHealthHandler(rw http.ResponseWriter, r *http.Request) {
	_m.Called(rw, r)
}

// MockIHealthHandler_GetHealthHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthHandler'
type MockIHealthHandler_GetHealthHandler_Call struct {
	*mock.Call
}

// GetHealthHandler is a helper method to define mock.On call
//   - rw http.ResponseWriter
//   - r *http.Request
func (_e *MockIHealthHandler_Expecter) GetHealthHandler(rw interface{}, r interface{}) *MockIHealthHandler_GetHealthHandler_Call {
	return &MockIHealthHandler_GetHealthHandler_Call{Call: _e.mock.On("GetHealthHandler", rw, r)}
}

func (_c *MockIHealthHandler_GetHealthHandler_Call) Run(run func(rw http.ResponseWriter, r *http.Request)) *MockIHealthHandler_GetHealthHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockIHealthHandler_GetHealthHandler_Call) Return() *MockIHealthHandler_GetHealthHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHealthHandler_GetHealthHandler_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockIHealthHandler_GetHealthHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIHealthHandler creates a new instance of MockIHealthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHealthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHealthHandler {
	mock := &MockIHealthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
