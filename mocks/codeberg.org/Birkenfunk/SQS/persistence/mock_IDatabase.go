// Code generated by mockery v2.42.2. DO NOT EDIT.

package persistence

import (
	dtos "codeberg.org/Birkenfunk/SQS/dtos"
	mock "github.com/stretchr/testify/mock"
)

// MockIDatabase is an autogenerated mock type for the IDatabase type
type MockIDatabase struct {
	mock.Mock
}

type MockIDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDatabase) EXPECT() *MockIDatabase_Expecter {
	return &MockIDatabase_Expecter{mock: &_m.Mock}
}

// GetWeatherByLocation provides a mock function with given fields: location
func (_m *MockIDatabase) GetWeatherByLocation(location string) (*dtos.WeatherDto, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherByLocation")
	}

	var r0 *dtos.WeatherDto
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dtos.WeatherDto, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *dtos.WeatherDto); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.WeatherDto)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDatabase_GetWeatherByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeatherByLocation'
type MockIDatabase_GetWeatherByLocation_Call struct {
	*mock.Call
}

// GetWeatherByLocation is a helper method to define mock.On call
//   - location string
func (_e *MockIDatabase_Expecter) GetWeatherByLocation(location interface{}) *MockIDatabase_GetWeatherByLocation_Call {
	return &MockIDatabase_GetWeatherByLocation_Call{Call: _e.mock.On("GetWeatherByLocation", location)}
}

func (_c *MockIDatabase_GetWeatherByLocation_Call) Run(run func(location string)) *MockIDatabase_GetWeatherByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIDatabase_GetWeatherByLocation_Call) Return(_a0 *dtos.WeatherDto, _a1 error) *MockIDatabase_GetWeatherByLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDatabase_GetWeatherByLocation_Call) RunAndReturn(run func(string) (*dtos.WeatherDto, error)) *MockIDatabase_GetWeatherByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDatabase creates a new instance of MockIDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDatabase {
	mock := &MockIDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
