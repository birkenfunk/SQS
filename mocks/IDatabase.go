// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	dtos "codeberg.org/Birkenfunk/SQS/dtos"
	mock "github.com/stretchr/testify/mock"
)

// IDatabase is an autogenerated mock type for the IDatabase type
type IDatabase struct {
	mock.Mock
}

// AddWeather provides a mock function with given fields: dto
func (_m *IDatabase) AddWeather(dto *dtos.WeatherDto) error {
	ret := _m.Called(dto)

	if len(ret) == 0 {
		panic("no return value specified for AddWeather")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.WeatherDto) error); ok {
		r0 = rf(dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWeatherByLocation provides a mock function with given fields: location
func (_m *IDatabase) GetWeatherByLocation(location string) (*dtos.WeatherDto, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherByLocation")
	}

	var r0 *dtos.WeatherDto
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dtos.WeatherDto, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *dtos.WeatherDto); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.WeatherDto)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIDatabase creates a new instance of IDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDatabase {
	mock := &IDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
